package restaurant;/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import action.ConnectDB;
import action.SessionData;

import javax.swing.*;
import java.awt.*;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 *
 * @author ADMIN
 */
public class RListMenuFrame extends JFrame {


    /**
     * Creates new form ResMenuFrame
     */
    public RListMenuFrame( ) {
        initComponents();
        //show the Restaurant panel first always
        CardLayout cardLayout = (CardLayout) txtResult.getLayout();
        nothingPanel.setVisible(true);
        ShowMenuPanel.setVisible(false);
        AddMenuPanel.setVisible(false);
        cardLayout.show(txtResult, "RestaurantPanel");
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        RestaurantPanel = new JPanel();
        enterButton = new JButton();
        menuButton = new JButton();
        addMenuButton = new JButton();
        txtResult = new JPanel();
        ShowMenuPanel = new JPanel();
        jScrollPane1 = new JScrollPane();
        txtMenu = new JTextArea();
        jLabel1 = new JLabel();
        AddMenuPanel = new JPanel();
        jPanel1 = new JPanel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        txtAddFoodName = new JTextField();
        txtAddFoodPrice = new JTextField();
        addFoodButton = new JButton();
        nothingPanel = new JPanel();

        setLocation(700,100);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);


        enterButton.setText("Refresh");
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        menuButton.setText("Menu");
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });

        addMenuButton.setText("Add Dishes");
        addMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuButtonActionPerformed(evt);
            }
        });

        txtResult.setLayout(new CardLayout());

        ShowMenuPanel.setBackground(new java.awt.Color(255, 204, 204));

        txtMenu.setColumns(20);
        txtMenu.setRows(5);
        jScrollPane1.setViewportView(txtMenu);

        jLabel1.setText("YOUR MENU");

        GroupLayout ShowMenuPanelLayout = new GroupLayout(ShowMenuPanel);
        ShowMenuPanel.setLayout(ShowMenuPanelLayout);
        ShowMenuPanelLayout.setHorizontalGroup(
            ShowMenuPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(ShowMenuPanelLayout.createSequentialGroup()
                .addGroup(ShowMenuPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(ShowMenuPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 582, GroupLayout.PREFERRED_SIZE))
                    .addGroup(ShowMenuPanelLayout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(jLabel1)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        ShowMenuPanelLayout.setVerticalGroup(
            ShowMenuPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(ShowMenuPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        txtResult.add(ShowMenuPanel, "card2");

        AddMenuPanel.setBackground(new java.awt.Color(204, 255, 255));

        jLabel2.setText("Food Name: ");

        jLabel3.setText("Price: ");

        jLabel4.setText("RESTAURANT'S NEW FOOD");

        txtAddFoodName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddFoodNameActionPerformed(evt);
            }
        });

        txtAddFoodPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddFoodPriceActionPerformed(evt);
            }
        });

        addFoodButton.setText("ADD");
        addFoodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFoodButtonActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addFoodButton)
                .addGap(146, 146, 146))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(txtAddFoodPrice, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddFoodName, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(209, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel4)
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txtAddFoodName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtAddFoodPrice, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addFoodButton)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        GroupLayout AddMenuPanelLayout = new GroupLayout(AddMenuPanel);
        AddMenuPanel.setLayout(AddMenuPanelLayout);
        AddMenuPanelLayout.setHorizontalGroup(
            AddMenuPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(AddMenuPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        AddMenuPanelLayout.setVerticalGroup(
            AddMenuPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(AddMenuPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        txtResult.add(AddMenuPanel, "card3");

        GroupLayout nothingPanelLayout = new GroupLayout(nothingPanel);
        nothingPanel.setLayout(nothingPanelLayout);
        nothingPanelLayout.setHorizontalGroup(
            nothingPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 663, Short.MAX_VALUE)
        );
        nothingPanelLayout.setVerticalGroup(
            nothingPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
        );

        txtResult.add(nothingPanel, "card4");

        GroupLayout RestaurantPanelLayout = new GroupLayout(RestaurantPanel);
        RestaurantPanel.setLayout(RestaurantPanelLayout);
        RestaurantPanelLayout.setHorizontalGroup(
            RestaurantPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(RestaurantPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RestaurantPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(RestaurantPanelLayout.createSequentialGroup()
                        .addComponent(txtResult, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(RestaurantPanelLayout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(menuButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addMenuButton)
                        .addGap(118, 118, 118))))
            .addGroup(RestaurantPanelLayout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(enterButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        RestaurantPanelLayout.setVerticalGroup(
            RestaurantPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(RestaurantPanelLayout.createSequentialGroup()
                .addComponent(enterButton)
                .addGap(12, 12, 12)
                .addGroup(RestaurantPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(addMenuButton)
                    .addComponent(menuButton, GroupLayout.Alignment.TRAILING))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtResult, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(RestaurantPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>                        

    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
       
        
       CardLayout cardLayout = (CardLayout) txtResult.getLayout();
       cardLayout.show(txtResult, "ShowMenuPanel"); 
       ShowMenuPanel.setVisible(true);
       AddMenuPanel.setVisible(false);       
    }                                          

    private void addMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        CardLayout cardLayout = (CardLayout) txtResult.getLayout();
        cardLayout.show(txtResult, "AddMenuPanel");
        ShowMenuPanel.setVisible(false);
        AddMenuPanel.setVisible(true);
        
        //connect to database
        

    }                                             

    private void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int restaurantId = SessionData.getInstance().getId();

        if (restaurantId == 0) {
            JOptionPane.showMessageDialog(null, "Restaurant ID not set! Please log in.", "Message", JOptionPane.WARNING_MESSAGE);
            return;
        }
    
        
        

    txtMenu.selectAll();
    txtMenu.replaceSelection("");

    // Replace with the actual IP address of your SQL Server and update the database name, user, and password

    try{        // Use a parameterized query to avoid SQL injection
        ConnectDB newConn = new ConnectDB();
        String SQL = "SELECT M.FoodName, R.RestaurantName, M.Price " +
                "FROM MenuItem M " +
                "JOIN Restaurant R ON M.RestaurantID = R.RestaurantID " +
                "WHERE R.RestaurantID = ?";

        // Set the parameter value to the entered restaurant ID
        newConn.preparedStmt  = newConn.getConn().prepareStatement(SQL);
        newConn.preparedStmt.setInt(1, restaurantId); // Use the stored restaurant ID

        ResultSet rs = newConn.preparedStmt.executeQuery();


        // Display column names
        txtMenu.append("Food Name\tPrice\n");

        // Display query results
        while (rs.next()) {
            // Append food name and price to the text area
            txtMenu.append(rs.getString("FoodName") + "\t" + rs.getDouble("Price") + "\n");
        }

        // Show the menu panel after successfully retrieving and displaying the menu
        CardLayout cardLayout = (CardLayout) txtResult.getLayout();
        cardLayout.show(txtResult, "ShowMenuPanel");
        ShowMenuPanel.setVisible(true);
        AddMenuPanel.setVisible(false);

        newConn.closeConnection();

    } catch (SQLException e) {
        // Handle exceptions (log and/or display an error message)
        txtMenu.setText("Error retrieving menu: " + e.getMessage());
        e.printStackTrace(); // Log the exception stack trace
    }

    }                                           

    private void txtAddFoodNameActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void txtAddFoodPriceActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void addFoodButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String newFoodName = txtAddFoodName.getText().trim();
        String newFoodPriceStr = txtAddFoodPrice.getText().trim();

    // Validate that both fields are filled
    if (newFoodName.isEmpty() || newFoodPriceStr.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter both food name and price!", "Message", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        double newFoodPrice = Double.parseDouble(newFoodPriceStr);

        try{
            ConnectDB newConn = new ConnectDB();
            // add food the the menuItem of the restaurant
            String SQL = "INSERT INTO MenuItem (FoodName, Price, RestaurantID) VALUES (?, ?, ?)";
            int restaurantId= SessionData.getInstance().getId();
            // Set the parameters for the new food item
            newConn.preparedStmt  = newConn.getConn().prepareStatement(SQL);
            newConn.preparedStmt.setString(1, newFoodName);
            newConn.preparedStmt.setDouble(2, newFoodPrice);
            newConn.preparedStmt.setInt(3, restaurantId );

            // Execute the insertion query
            int rowsAffected = newConn.preparedStmt.executeUpdate();

            // Check if the insertion was successful
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "New food added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                // You may choose to update the UI or clear the input fields after adding a new food
                txtAddFoodName.setText("");
                txtAddFoodPrice.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add new food. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            // Handle exceptions (log and/or display an error message)
            e.printStackTrace(); // Log the exception stack trace
            JOptionPane.showMessageDialog(null, "Error adding new food: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        // Handle the case where the entered price is not a valid double
        JOptionPane.showMessageDialog(null, "Please enter a valid price!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }                                             

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify                     
    private JPanel AddMenuPanel;
    private JPanel RestaurantPanel;
    private JPanel ShowMenuPanel;
    private JButton addFoodButton;
    private JButton addMenuButton;
    private JButton enterButton;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JButton menuButton;
    private JPanel nothingPanel;
    private JTextField txtAddFoodName;
    private JTextField txtAddFoodPrice;
    private JTextArea txtMenu;
    private JPanel txtResult;
    // End of variables declaration                   
}



